// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  Reports Report[]
}

model Report {
  id     Int      @id @default(autoincrement())
  day    Int
  upper  String   @db.VarChar(255)
  lower  String   @db.VarChar(255)
  temp   Float
  userId String
  date   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  rawReportId Int       @unique
  rawReport   RawReport @relation(fields: [rawReportId], references: [id], onDelete: Cascade)
}

model RawReport {
  id           Int    @id @default(autoincrement())
  temp         Float
  temp_min     Float
  temp_max     Float
  pressure     Int
  humidity     Int
  wind_speed   Int
  wind_deg     Int
  city_id      Int
  city         String
  country      String
  lon          Float
  lat          Float
  weather_code Int
  weather_icon String

  Report Report?
}

// Next-Auth (Dejar abajo)

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
